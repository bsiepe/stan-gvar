---
title: "VAR"
format: html
---

---
title: "GVAR - Model Fitting and Results"
output:
  html_document:
    toc: yes
    toc_float: yes
    collapsed: no
    smooth_scroll: yes
---

```{r setup, include = FALSE}
# Libraries
packages <- c(
  "tidyverse",
  "devtools",
  "readxl",
  "lubridate",
  "rmarkdown",
  "psych",
  "cmdstanr",
  "loo",
  "bayesplot",
  "posterior",
  "bayestestR",
  "here",
  "rtf",
  "sjlabelled",
  "tsnet",
  "BGGM",
  "graphicalVAR"
)
#remotes::install_github("donaldRwilliams/BGGM")
#devtools::install_github("bsiepe/tsnet")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(packages, update = F, character.only = T)

set.seed(35037)
```

### Simulate data
```{r}
gvar_mod <- graphicalVAR::randomGVARmodel(Nvar = 8,
                              probKappaEdge = .3,
                              probBetaEdge = .2)
# DGP matrices
gvar_mod$beta     # regression weights
gvar_mod$kappa    # precision matrix

# Simulate data from it
gvar_dat <- graphicalVAR::graphicalVARsim(nTime = 200, 
                                          beta = gvar_mod$beta,
                                          kappa = gvar_mod$kappa)

# Additionally, use data from our preprint
l_graphs <- readRDS(here("data", "l_graphs.rds"))

# Choose graph 6
gvar_mod <- l_graphs$graph6

# Add partial correlations
gvar_mod$PCC <- -cov2cor(gvar_mod$kappa)
diag(gvar_mod$PCC) <- 0

# Simulate data
gvar_dat <- graphicalVAR::graphicalVARsim(nTime = 200, 
                                          beta = gvar_mod$beta,
                                          kappa = gvar_mod$kappa)


```

Scale data
```{r}
Y <- gvar_dat %>% apply(., 2, scale)
K <- ncol(gvar_dat)
n_t <- nrow(gvar_dat)
```

### Specify Priors
```{r}
# prior on the locations of partial correlations (scaled Beta location)
prior_Rho_loc <- matrix(.5, nrow = K, ncol = K)
# prior_Rho_scale <- matrix(sqrt(.5), nrow = K, ncol = K) # sqrt(mu) corresponds to uniform distribution
prior_Rho_scale <- matrix(.2, nrow = K, ncol = K) # bit more regularization

prior_beta_loc <- matrix(0, nrow = K, ncol = K)
prior_beta_scale <- matrix(.5, nrow = K, ncol = K)  # regularize a bit
```

#### Plot prior choices for scaled beta
BS: Would be good to not make this uniform, high partial correlations are quite unrealistic.
Would decrease the prior sd for the partial correlations
```{r}
mu <- .5
sd <- sqrt(mu)
a <- mu / (sd * sd)
b <- (1-mu) / (sd * sd)
hist((rbeta(1e6,a, b) - .5) * 2)
```

## Fit VAR Model in Stan
```{r stan data & compilation}
# prepare stan data
stan_data <-
  list(K = K,
       "T" = n_t,
       Y = as.matrix(Y),
       prior_Rho_loc = prior_Rho_loc,
       prior_Rho_scale = prior_Rho_scale,
       prior_beta_loc = prior_beta_loc,
       prior_beta_scale = prior_beta_scale
       )
# Choose model to fit
model_name <- "VAR_LKJ"
# Compile model
var_lkj_model <- cmdstanr::cmdstan_model(
  stan_file = here("scripts", paste0(model_name, ".stan")),
  pedantic = TRUE#, 
  #quiet = FALSE
  )
# number of MCMC chains
n_chains <- 4
```

```{r sampling, message=FALSE}
# Run sampler
var_lkj_fit <- var_lkj_model$sample(
  data = stan_data,
  seed = 2023,
  chains = n_chains,
  parallel_chains = n_chains,
  iter_warmup = 500,
  iter_sampling = 500,
  refresh = 500,
  thin = 1,
  adapt_delta = .8,
  init = .1
)
# time to fit
var_lkj_fit$time()$total
```

## Effective sample size (ESS) & Rhat Plots
```{r}
# color scheme
color_scheme_set(scheme = "purple")
# Effective sample sizes
plot_neff <-
  mcmc_neff_hist(bayesplot::neff_ratio(var_lkj_fit), binwidth = .01) +
  labs(title = "A") +
  guides(color = "none", fill = "none") +
  theme(
    legend.text = element_blank(),
    legend.key = element_blank(),
    title = element_text(size = 16, face = "bold")
  )
# Rhat
# BS: Why does this have missings?
plot_rhat <-
  bayesplot::mcmc_rhat_hist(bayesplot::rhat(var_lkj_fit)) +
  labs(title = "B") +
  guides(color = "none", fill = "none") +
  theme(
    legend.text = element_blank(),
    legend.key = element_blank(),
    title = element_text(size = 16, face = "bold")
  ) +
  yaxis_text(on = TRUE)
# Combined plot
plot_diagnostics <- gridExtra::grid.arrange(plot_neff, plot_rhat, ncol = 2)
```

```{r}
#param_ests <- var_lkj_fit$summary(c("B", "Rho","mu_B","sigma_B", "sigma_theta"))
param_ests <- var_lkj_fit$summary()
```

# Parameter Recovery

### Betas
```{r}
medians_beta <-
  var_lkj_fit$summary("Beta") %>% 
  dplyr::select(median) %>% 
  unlist() %>% 
  round(2) %>% 
  matrix(., nrow = K, byrow = FALSE)
cor.plot(medians_beta)

cor.plot(gvar_mod$beta
)
```

### Difference in Betas
```{r}
diff_Rho <- medians_beta - gvar_mod$beta
cor.plot(diff_Rho)
```

```{r}
draws_beta <- var_lkj_fit$draws("Beta") %>% as_draws_matrix()
bayesplot::ppc_intervals(gvar_mod$beta %>% as.vector(),draws_beta)
```

### Partial Correlations
```{r}
medians_rho <-
  var_lkj_fit$summary("Rho") %>% 
  dplyr::select(median) %>% 
  unlist() %>% 
  round(2) %>% 
  matrix(., nrow = K, byrow = FALSE)
cor.plot(medians_rho)

cor.plot(gvar_mod$PCC)

```

### Difference in partial correlations
```{r}
diff_Rho <- medians_rho - gvar_mod$PCC
cor.plot(diff_Rho)
```


```{r}
draws_rho <- var_lkj_fit$draws("Rho") %>% as_draws_matrix()
bayesplot::ppc_intervals(gvar_mod$PCC %>% as.vector(),draws_rho)
```


***

# Compare One Fit to Itself
```{r}

```


***

# Compare Variational Inference
```{r}
# Run variational
var_lkj_fit_vb <- var_lkj_model$variational(
  data = stan_data,
  seed = 2023,
  tol_rel_obj = .001,
  init = .1,
  refresh = 1000
)
# time to fit
var_lkj_fit_vb$time()$total
```

```{r}
medians_beta_vb <-
  var_lkj_fit_vb$summary("Beta") %>% 
  dplyr::select(median) %>% 
  unlist() %>% 
  round(2)
plot(medians_beta_vb, medians_beta %>% as.vector())
abline(coef = c(0,1))
```


```{r}
medians_rho_vb <-
  var_lkj_fit_vb$summary("Rho") %>% 
  dplyr::select(median) %>% 
  unlist() %>% 
  round(2)

# This looks abit more ugly now!
plot(medians_rho_vb, medians_rho %>% as.vector())
abline(coef = c(0,1))
```





# Posterior comparisons
Compare data structures of BGGM and the stan model/posterior package
```{r}
library(BGGM)
library(tsnet)


# Load data of two individuals
data <- BGGM::ifit
data_1 <- subset(data, id == 1)
data_3 <- subset(data, id == 3)

# Estimate networks
# (should perform detrending etc. in a real use case)
net_1 <- BGGM::var_estimate(data_1[,-1],
                            rho_sd = 0.25, 
                            beta_sd = 0.5,
                            iter = 50000)
net_3 <- BGGM::var_estimate(data_3[,-1],
                            rho_sd = 0.25, 
                            beta_sd = 0.5,
                            iter = 50000)


```
Posterior samples are in a slightly different format when we use the BGGM package
in BGGM, they are in a tensor format. I think this will be the most efficient format for the test.
```{r}
source(here("scripts","functions.R"))
dim(net_1$fit$beta)
arr <- net_1$fit$beta
dim(arr)
mat <- draws_array2matrix(arr)

arr2 <- 
draws_matrix2array(mat)
dim(arr2)
arr[,,1]
arr2[,,1]
```




