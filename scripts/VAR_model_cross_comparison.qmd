---
title: "GVAR - Model Fitting and Results"
output:
  html_document:
    toc: yes
    toc_float: yes
    collapsed: no
    smooth_scroll: yes
---

```{r setup, include = FALSE}
# Libraries
packages <- c(
  "tidyverse",
  "devtools",
  "readxl",
  "lubridate",
  "rmarkdown",
  "psych",
  "cmdstanr",
  "rstan",
  "loo",
  "bayesplot",
  "posterior",
  "bayestestR",
  "here",
  "rtf",
  "sjlabelled",
  "tsnet",
  "BGGM",
  "graphicalVAR",
  "mvtnorm"
)
#remotes::install_github("donaldRwilliams/BGGM")
#devtools::install_github("bsiepe/tsnet")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(packages, update = F, character.only = T)

source(here("scripts","functions.R"))
set.seed(35037)
```

### Simulate data from same model, slightly different DGP, strongly different DGP
```{r}
source(here("scripts","functions.R"))

l_changed_graphs_0305 <- readRDS(here("data/l_changed_graphs_0305.rds"))
# data generating graphs
gvar_mod1 <- l_changed_graphs_0305[["graph5"]][["truegraph"]]
gvar_mod2 <- l_changed_graphs_0305[["graph5"]][["const0.05"]]
gvar_mod3 <- l_changed_graphs_0305[["graph5"]][["const0.1"]]
gvar_mod4 <- l_changed_graphs_0305[["graph5"]][["const0.15"]]
# number of time points
t <- 500
# simulate data
data_1a <- graphicalVAR::graphicalVARsim(nTime = t,
                                         beta = gvar_mod1$beta,
                                         kappa = gvar_mod1$kappa)
data_1b <- graphicalVAR::graphicalVARsim(nTime = t,
                                         beta = gvar_mod1$beta,
                                         kappa = gvar_mod1$kappa)
data_2 <- graphicalVAR::graphicalVARsim(nTime = t,
                                        beta = gvar_mod2$beta,
                                        kappa = gvar_mod2$kappa)
data_3 <- graphicalVAR::graphicalVARsim(nTime = t,
                                        beta = gvar_mod3$beta,
                                        kappa = gvar_mod3$kappa)
data_4 <- graphicalVAR::graphicalVARsim(nTime = t,
                                        beta = gvar_mod4$beta,
                                        kappa = gvar_mod4$kappa)
```

### Fit networks 
```{r message=FALSE}
net_1a_fit <-
  fit_gVAR_stan(
    data = data_1a,
    iter_sampling = 500,
    method = "sampling",
  )
net_1b_fit <-
  fit_gVAR_stan(
    data = data_1b,
    iter_sampling = 500,
    method = "sampling"
  )
net_2_fit <-
  fit_gVAR_stan(
    data = data_2,
    iter_sampling = 500,
    method = "sampling"
  )
net_3_fit <-
  fit_gVAR_stan(
    data = data_3,
    iter_sampling = 500,
    method = "sampling"
  )
net_4_fit <-
  fit_gVAR_stan(
    data = data_4,
    iter_sampling = 500,
    method = "sampling"
  )
```

### Compute LOOs: self-model and cross-model
```{r}
cores <- parallel::detectCores() - 4
net_1a_data_1a_loo <- loo_gVAR(stan_fit = net_1a_fit, data = data_1a, n_cores = cores)
net_1a_data_1b_loo <- loo_gVAR(stan_fit = net_1a_fit, data = data_1b, n_cores = cores)
net_1a_data_2_loo <- loo_gVAR(stan_fit = net_1a_fit, data = data_2, n_cores = cores)
net_1a_data_3_loo <- loo_gVAR(stan_fit = net_1a_fit, data = data_3, n_cores = cores)
net_1a_data_4_loo <- loo_gVAR(stan_fit = net_1a_fit, data = data_4, n_cores = cores)
```

```{r}
plot(net_1a_data_1a_loo)
plot(net_1a_data_1b_loo)
plot(net_1a_data_2_loo)
plot(net_1a_data_3_loo)
plot(net_1a_data_4_loo)
```

### LOO model comparison for cross-fit
```{r}
loo_compare(net_1a_data_1a_loo, net_1a_data_1b_loo)
loo_compare(net_1a_data_1a_loo, net_1a_data_2_loo)
loo_compare(net_1a_data_1a_loo, net_1a_data_3_loo)
loo_compare(net_1a_data_1a_loo, net_1a_data_4_loo)
```


## Model Comparison via marginal log-likelihoods
### Compute marginal logliks
```{r}
method <- "warp3" # c("normal", "warp3")

# foward
net_1a_data_1a_logml <- bridgesampling::bridge_sampler(
  samples = net_1a_fit,
  stan_fit = net_1a_fit,
  method = method
)$logml

net_1a_data_1b_logml <- bridgesampling::bridge_sampler(
  samples = net_1a_fit,
  stan_fit = net_1a_fit,
  log_posterior = log_lik_gVAR,
  data = data_1b,
  method = method
)$logml

net_1a_data_2_logml <- bridgesampling::bridge_sampler(
  samples = net_1a_fit,
  stan_fit = net_1a_fit,
  log_posterior = log_lik_gVAR,
  data = data_2,
  method = method
)$logml

net_1a_data_3_logml <- bridgesampling::bridge_sampler(
  samples = net_1b_fit,
  stan_fit = net_1b_fit,
  log_posterior = log_lik_gVAR,
  data = data_3,
  method = method
)$logml

net_1a_data_4_logml <- bridgesampling::bridge_sampler(
  samples = net_1b_fit,
  stan_fit = net_1b_fit,
  log_posterior = log_lik_gVAR,
  data = data_4,
  method = method
)$logml

# backwards
net_1b_data_1a_logml <- bridgesampling::bridge_sampler(
  samples = net_1b_fit,
  stan_fit = net_1b_fit,
  log_posterior = log_lik_gVAR,
  data = data_1a,
  method = method
)$logml

net_2_data_1a_logml <- bridgesampling::bridge_sampler(
  samples = net_2_fit,
  stan_fit = net_2_fit,
  log_posterior = log_lik_gVAR,
  data = data_1a,
  method = method
)$logml

net_3_data_1a_logml <- bridgesampling::bridge_sampler(
  samples = net_3_fit,
  stan_fit = net_3_fit,
  log_posterior = log_lik_gVAR,
  data = data_1a,
  method = method
)$logml

net_4_data_1a_logml <- bridgesampling::bridge_sampler(
  samples = net_4_fit,
  stan_fit = net_4_fit,
  log_posterior = log_lik_gVAR,
  data = data_1a,
  method = method
)$logml
```

### Compute BFs based on marginal log-likelihoods
```{r}
# forward
bridgesampling::bayes_factor(net_1a_data_1a_logml, net_1a_data_1b_logml, log = TRUE)
bridgesampling::bayes_factor(net_1a_data_1a_logml, net_1a_data_2_logml, log = TRUE)
bridgesampling::bayes_factor(net_1a_data_1a_logml, net_1a_data_3_logml, log = TRUE)
bridgesampling::bayes_factor(net_1a_data_1a_logml, net_1a_data_4_logml, log = TRUE)
```

```{r}
# backwards
bridgesampling::bayes_factor(net_1a_data_1a_logml, net_1b_data_1a_logml, log = TRUE)
bridgesampling::bayes_factor(net_1a_data_1a_logml, net_2_data_1a_logml, log = TRUE)
bridgesampling::bayes_factor(net_1a_data_1a_logml, net_3_data_1a_logml, log = TRUE)
bridgesampling::bayes_factor(net_1a_data_1a_logml, net_4_data_1a_logml, log = TRUE)
```


### Experimental BFs
```{r}
ll_1a_1a <- log_lik_gVAR(
  Y = data_1a,
  draws_beta = posterior::as_draws_matrix(rstan::extract(
    net_1a_fit, pars = "Beta", permuted = FALSE
  )),
  draws_sigma = posterior::as_draws_matrix(rstan::extract(
    net_1a_fit, pars = "Sigma", permuted = FALSE
  )),
  n_cores = parallel::detectCores() - 4
) %>% apply(., 1, sum) %>% median()

ll_1a_1b <- log_lik_gVAR(
  Y = data_1b,
  draws_beta = posterior::as_draws_matrix(rstan::extract(
    net_1a_fit, pars = "Beta", permuted = FALSE
  )),
  draws_sigma = posterior::as_draws_matrix(rstan::extract(
    net_1a_fit, pars = "Sigma", permuted = FALSE
  )),
  n_cores = parallel::detectCores() - 4
) %>% apply(., 1, sum) %>% median()

(ll_1a_1a - net_1a_data_1a_logml) - (ll_1a_1b - net_1a_data_1b_logml)
```

```{r}
ll_1a_2 <- log_lik_gVAR(
  Y = data_2,
  draws_beta = posterior::as_draws_matrix(rstan::extract(
    net_1a_fit, pars = "Beta", permuted = FALSE
  )),
  draws_sigma = posterior::as_draws_matrix(rstan::extract(
    net_1a_fit, pars = "Sigma", permuted = FALSE
  )),
  n_cores = parallel::detectCores() - 4
) %>% apply(., 1, sum) %>% median()

(ll_1a_1a - net_1a_data_1a_logml) - (ll_1a_2 - net_1a_data_2_logml)
```

```{r}
ll_1a_3 <- log_lik_gVAR(
  Y = data_3,
  draws_beta = posterior::as_draws_matrix(rstan::extract(
    net_1a_fit, pars = "Beta", permuted = FALSE
  )),
  draws_sigma = posterior::as_draws_matrix(rstan::extract(
    net_1a_fit, pars = "Sigma", permuted = FALSE
  )),
  n_cores = parallel::detectCores() - 4
) %>% apply(., 1, sum) %>% median()

(ll_1a_1a - net_1a_data_1a_logml) - (ll_1a_3 - net_1a_data_3_logml)
```

```{r}
ll_1a_4 <- log_lik_gVAR(
  Y = data_4,
  draws_beta = posterior::as_draws_matrix(rstan::extract(
    net_1a_fit, pars = "Beta", permuted = FALSE
  )),
  draws_sigma = posterior::as_draws_matrix(rstan::extract(
    net_1a_fit, pars = "Sigma", permuted = FALSE
  )),
  n_cores = parallel::detectCores() - 4
) %>% apply(., 1, sum) %>% median()

(ll_1a_1a - net_1a_data_1a_logml) - (ll_1a_4 - net_1a_data_4_logml)
```

