---
title: "GVAR - Posterior Matrix Comparisons"
output:
  html_document:
    toc: yes
    toc_float: yes
    collapsed: no
    smooth_scroll: yes
---

```{r setup, include = FALSE}
# Libraries
packages <- c(
  "tidyverse",
  "devtools",
  "rmarkdown",
  "psych",
  "cmdstanr",
  "rstan",
  "loo",
  "bayesplot",
  "posterior",
  "bayestestR",
  "here",
  "sjlabelled",
  "tsnet",
  "BGGM",
  "graphicalVAR",
  "mvtnorm"
)
#remotes::install_github("donaldRwilliams/BGGM")
#devtools::install_github("bsiepe/tsnet")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(packages, update = F, character.only = T)

source(here("scripts","functions.R"))
set.seed(35037)
```

# Posterior comparisons

### Simulate gVAR-Data

Simulate data from same model, slightly different DGP, strongly different DGP
```{r}
l_changed_graphs_0305 <- readRDS(here("data/l_changed_graphs_0305.rds"))
# data generating graphs
gvar_mod1 <- l_changed_graphs_0305[["graph5"]][["truegraph"]]
gvar_mod2 <- l_changed_graphs_0305[["graph5"]][["const0.05"]]
gvar_mod3 <- l_changed_graphs_0305[["graph5"]][["const0.1"]]
gvar_mod4 <- l_changed_graphs_0305[["graph5"]][["const0.15"]]
# number of time points
t <- 500
# simulate data
data_1a <- graphicalVAR::graphicalVARsim(nTime = t,
                                         beta = gvar_mod1$beta,
                                         kappa = gvar_mod1$kappa)
data_1b <- graphicalVAR::graphicalVARsim(nTime = t,
                                         beta = gvar_mod1$beta,
                                         kappa = gvar_mod1$kappa)
data_2 <- graphicalVAR::graphicalVARsim(nTime = t,
                                        beta = gvar_mod2$beta,
                                        kappa = gvar_mod2$kappa)
data_3 <- graphicalVAR::graphicalVARsim(nTime = t,
                                        beta = gvar_mod3$beta,
                                        kappa = gvar_mod3$kappa)
data_4 <- graphicalVAR::graphicalVARsim(nTime = t,
                                        beta = gvar_mod4$beta,
                                        kappa = gvar_mod4$kappa)
```

### Fit networks 
```{r message=FALSE}
method <- "variational"
net_1a_fit <-
  fit_gVAR_stan(
    data = data_1a,
    iter_sampling = 500,
    method = method
  )
net_1b_fit <-
  fit_gVAR_stan(
    data = data_1b,
    iter_sampling = 500,
    method = method
  )
net_2_fit <-
  fit_gVAR_stan(
    data = data_2,
    iter_sampling = 500,
    method = method
  )
net_3_fit <-
  fit_gVAR_stan(
    data = data_3,
    iter_sampling = 500,
    method = method
  )
net_4_fit <-
  fit_gVAR_stan(
    data = data_4,
    iter_sampling = 500,
    method = method
  )
```

### Extract posterior matrices for Beta
```{r}
beta_post_1a <-
  rstan::extract(net_1a_fit, "Beta", permuted = FALSE) %>% as_draws_matrix() 
beta_post_1b <-
  rstan::extract(net_1b_fit, "Beta", permuted = FALSE) %>% as_draws_matrix() 
beta_post_2 <-
  rstan::extract(net_2_fit, "Beta", permuted = FALSE) %>% as_draws_matrix()
beta_post_3 <-
  rstan::extract(net_3_fit, "Beta", permuted = FALSE) %>% as_draws_matrix()
beta_post_4 <-
  rstan::extract(net_4_fit, "Beta", permuted = FALSE) %>% as_draws_matrix()

rho_post_1a <-
  rstan::extract(net_1a_fit, "Rho", permuted = FALSE) %>% as_draws_matrix() 
rho_post_1b <-
  rstan::extract(net_1b_fit, "Rho", permuted = FALSE) %>% as_draws_matrix() 
rho_post_2 <-
  rstan::extract(net_2_fit, "Rho", permuted = FALSE) %>% as_draws_matrix()
rho_post_3 <-
  rstan::extract(net_3_fit, "Rho", permuted = FALSE) %>% as_draws_matrix()
rho_post_4 <-
  rstan::extract(net_4_fit, "Rho", permuted = FALSE) %>% as_draws_matrix()
```

```{r}
mat1 <- draws2list(rho_post_1a)
mat2 <- draws2list(rho_post_1b)

mat1 <-
  purrr::map(mat1, function(x) {
    DescTools::FisherZ(x) %>%  .[lower.tri(.)] %>% as.vector()
  })
mat2 <-
  purrr::map(mat2, function(x) {
    DescTools::FisherZ(x) %>% as.vector()
  })

mat1 <- do.call(rbind, mat1)
mat2 <- do.call(rbind, mat2)
```

### Compare matrices
#### Beta
```{r}
source(here("scripts","functions.R"))
n_boot <- 0
null_dist <- "uniform"
prior_scale <- .5
null_scale <- .01
compare_matrices(
  mat1 = beta_post_1a,
  mat2 = beta_post_1b,
  bootstrap_samples = n_boot,
  H1_prior_scale = prior_scale,
  H0_distribution = null_dist,
  H0_prior_scale = null_scale,
  plot = TRUE
)
compare_matrices(
  mat1 = beta_post_1a,
  mat2 = beta_post_2,
  bootstrap_samples = n_boot,
  H1_prior_scale = prior_scale,
  H0_distribution = null_dist,
  H0_prior_scale = null_scale,
  plot = TRUE
)
compare_matrices(
  mat1 = beta_post_1a,
  mat2 = beta_post_3,
  bootstrap_samples = n_boot,
  H1_prior_scale = prior_scale,
  H0_distribution = null_dist,
  H0_prior_scale = null_scale,
  plot = TRUE
)
compare_matrices(
  mat1 = beta_post_1a,
  mat2 = beta_post_4,
  bootstrap_samples = n_boot,
  H1_prior_scale = prior_scale,
  H0_distribution = null_dist,
  H0_prior_scale = null_scale,
  plot = TRUE
) 
```

#### Rho
```{r}
source(here("scripts","functions.R"))
n_boot <- 0
null_dist <- "uniform"
prior_scale <- .5
null_scale <- .005
param <- "Rho"
compare_matrices(
  mat1 = rho_post_1a,
  mat2 =rho_post_1b,
  parameter_type = param,
  bootstrap_samples = n_boot,
  H1_prior_scale = prior_scale,
  H0_distribution = null_dist,
  H0_prior_scale = null_scale,
  plot = TRUE
)
compare_matrices(
  mat1 = rho_post_1a,
  mat2 = rho_post_2,
  parameter_type = param,
  bootstrap_samples = n_boot,
  H1_prior_scale = prior_scale,
  H0_distribution = null_dist,
  H0_prior_scale = null_scale,
  plot = TRUE
)
compare_matrices(
  mat1 = rho_post_1a,
  mat2 = rho_post_3,
  parameter_type = param,
  bootstrap_samples = n_boot,
  H1_prior_scale = prior_scale,
  H0_distribution = null_dist,
  H0_prior_scale = null_scale,
  plot = TRUE
)
compare_matrices(
  mat1 = rho_post_1a,
  mat2 = rho_post_4,
  parameter_type = param,
  bootstrap_samples = n_boot,
  H1_prior_scale = prior_scale,
  H0_distribution = null_dist,
  H0_prior_scale = null_scale,
  plot = TRUE
) 
```

### Compare different Null distributions
```{r}
source(here("scripts","functions.R"))

compare_matrices(
  mat1 = beta_post_1a,
  mat2 = beta_post_1b,
  H0_prior_scale = .1, 
  H0_distribution = "uniform",
  bootstrap_samples = 4e4,
  plot = TRUE,
  plot_xlim = 20, 
  plot_ylim = 2
)
compare_matrices(
  mat1 = beta_post_1a,
  mat2 = beta_post_1b,
  H0_prior_scale = .05, 
  H0_distribution = "normal",
  bootstrap_samples = 4e4,
  plot = TRUE,
  plot_xlim = 20, 
  plot_ylim = 2
)
compare_matrices(
  mat1 = beta_post_1a,
  mat2 = beta_post_1b, 
  H0_distribution = "posterior_uncertainty",
  bootstrap_samples = 4e4,
  plot = TRUE,
  plot_xlim = 20, 
  plot_ylim = 2
)
```

### Use custom priors
Instead of a centered prior with a fixed scale we can specify custom priors as a list of two matrices each containing the means and standard deviations for the normal priors on the single parameters in the parameter matrix.
```{r}
source(here("scripts","functions.R"))

n_boot <- 4e4
null_dist <- "posterior_uncertainty"
# initialize prior matrices
custom_prior <- list(
  loc = matrix(0, ncol = ncol(gvar_mod1$beta), nrow = nrow(gvar_mod1$beta)),
  scale = matrix(.5, ncol = ncol(gvar_mod1$beta), nrow = nrow(gvar_mod1$beta))
)
# change certain coefficients
custom_prior[[2]][1,] <- .1
custom_prior[[2]][2,] <- .01
custom_prior[[2]][3,] <- .1
custom_prior[[2]][5,] <- .1
custom_prior[[2]][6,] <- .01

compare_matrices(
  mat1 = beta_post_1a,
  mat2 = beta_post_1b,
  bootstrap_samples = n_boot,
  H1_custom_priors = custom_prior,
  H0_distribution = null_dist,
  plot = TRUE
)
compare_matrices(
  mat1 = beta_post_1a,
  mat2 = beta_post_2,
  bootstrap_samples = n_boot,
  H1_custom_priors = custom_prior,
  H0_distribution = null_dist,
  plot = TRUE
)
compare_matrices(
  mat1 = beta_post_1a,
  mat2 = beta_post_3,
  bootstrap_samples = n_boot,
  H1_custom_priors = custom_prior,
  H0_distribution = null_dist,
  plot = TRUE
) 
compare_matrices(
  mat1 = beta_post_1a,
  mat2 = beta_post_4,
  bootstrap_samples = n_boot,
  H1_custom_priors = custom_prior,
  H0_distribution = null_dist,
  plot = TRUE
) 
```

```{r}
n <- 30
log_BFs <- rep(NA, n)
for (i in 1:n) {
  list <- compare_matrices(
  mat1 = beta_post_1a,
  mat2 = beta_post_3,
  bootstrap_samples = n_boot,
  H0_distribution = "uniform",
  plot = FALSE)
  
  log_BFs[i] <- list[[1]] - list[[2]]
}
```

```{r}
hist(log(log_BFs),breaks = 30)
range(exp(log_BFs))
sd(log_BFs)
```


```{r}


data.frame(log_BFs = log_BFs, log_BFs_boot = log_BFs_boot) %>%
      ggplot2::ggplot() +
      ggplot2::geom_histogram(aes(log_BFs),
                            fill = "red",
                            alpha = .5,
                            binwidth = .1) +
      ggplot2::geom_histogram(aes(log_BFs_boot),
                            fill = "blue",
                            alpha = .5,
                            binwidth = .1) +
      ggplot2::xlim(-5, 0)

```






