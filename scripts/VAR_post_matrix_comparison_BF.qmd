---
title: "GVAR - Posterior Matrix Comparisons"
output:
  html_document:
    toc: yes
    toc_float: yes
    collapsed: no
    smooth_scroll: yes
---

```{r setup, include = FALSE}
# Libraries
packages <- c(
  "tidyverse",
  "devtools",
  "rmarkdown",
  "psych",
  "cmdstanr",
  "rstan",
  "loo",
  "bayesplot",
  "posterior",
  "bayestestR",
  "here",
  "sjlabelled",
  "tsnet",
  "BGGM",
  "graphicalVAR",
  "mvtnorm"
)
#remotes::install_github("donaldRwilliams/BGGM")
#devtools::install_github("bsiepe/tsnet")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(packages, update = F, character.only = T)

source(here("scripts","functions.R"))
set.seed(35037)
```

# Posterior comparisons

Simulate data from same model, slightly different DGP, strongly different DGP
```{r}
l_changed_graphs_0305 <- readRDS(here("data/l_changed_graphs_0305.rds"))
# data generating graphs
gvar_mod1 <- l_changed_graphs_0305[["graph5"]][["truegraph"]]
gvar_mod2 <- l_changed_graphs_0305[["graph5"]][["const0.05"]]
gvar_mod3 <- l_changed_graphs_0305[["graph5"]][["const0.1"]]
gvar_mod4 <- l_changed_graphs_0305[["graph5"]][["const0.15"]]
# number of time points
t <- 500
# simulate data
data_1a <- graphicalVAR::graphicalVARsim(nTime = t,
                                         beta = gvar_mod1$beta,
                                         kappa = gvar_mod1$kappa)
data_1b <- graphicalVAR::graphicalVARsim(nTime = t,
                                         beta = gvar_mod1$beta,
                                         kappa = gvar_mod1$kappa)
data_2 <- graphicalVAR::graphicalVARsim(nTime = t,
                                        beta = gvar_mod2$beta,
                                        kappa = gvar_mod2$kappa)
data_3 <- graphicalVAR::graphicalVARsim(nTime = t,
                                        beta = gvar_mod3$beta,
                                        kappa = gvar_mod3$kappa)
data_4 <- graphicalVAR::graphicalVARsim(nTime = t,
                                        beta = gvar_mod4$beta,
                                        kappa = gvar_mod4$kappa)
```

### Fit networks 
```{r message=FALSE}
net_1a_fit <-
  fit_gVAR_stan(
    data = data_1a,
    iter_sampling = 500,
    method = "sampling"
  )
net_1b_fit <-
  fit_gVAR_stan(
    data = data_1b,
    iter_sampling = 500,
    method = "sampling"
  )
net_2_fit <-
  fit_gVAR_stan(
    data = data_2,
    iter_sampling = 500,
    method = "sampling"
  )
net_3_fit <-
  fit_gVAR_stan(
    data = data_3,
    iter_sampling = 500,
    method = "sampling"
  )
net_4_fit <-
  fit_gVAR_stan(
    data = data_4,
    iter_sampling = 500,
    method = "sampling"
  )
```

### Extract posterior matrices for Beta
```{r}
beta_post_1a <-
  rstan::extract(net_1a_fit, "Beta", permuted = FALSE) %>% as_draws_matrix() 
beta_post_1b <-
  rstan::extract(net_1b_fit, "Beta", permuted = FALSE) %>% as_draws_matrix() 
beta_post_2 <-
  rstan::extract(net_2_fit, "Beta", permuted = FALSE) %>% as_draws_matrix()
beta_post_3 <-
  rstan::extract(net_3_fit, "Beta", permuted = FALSE) %>% as_draws_matrix()
beta_post_4 <-
  rstan::extract(net_4_fit, "Beta", permuted = FALSE) %>% as_draws_matrix()
```

### Function for comparison
```{r}
compare_mat <-
  function(mat1,
           mat2,
           bootstrap_samples = 0,
           H1_prior_sd = 0.5,
           null_prior_sd = 0.025,
           plot = TRUE) {
    #### with bootstrapping ###
    if (bootstrap_samples > 0) {
      # sample rows from posterior iterations
      rows1 <-
        sample(1:nrow(mat1),
               size = bootstrap_samples,
               replace = TRUE)
      rows2 <-
        sample(1:nrow(mat2),
               size = bootstrap_samples,
               replace = TRUE)
      # assemble new posterior draws_matrices
      mat1 <-
        purrr::map(
          .x = rows1,
          .f = function(.x) {
            mat1[.x, ]
          }
        ) %>%
        do.call(rbind, .)
      mat2 <-
        purrr::map(
          .x = rows2,
          .f = function(.x) {
            mat2[.x, ]
          }
        ) %>%
        do.call(rbind, .)
      # compute differences between matrices
      diff_post <- (mat1 - mat2) %>%
        abs() %>%
        apply(., 1, sum)
      
      # compute prior difference matrices
      diff_prior <-
        abs(rnorm(n = bootstrap_samples * ncol(mat1), mean = 0, sd = H1_prior_sd) -
              rnorm(n = bootstrap_samples * ncol(mat1), mean = 0, sd = H1_prior_sd)) %>%
        matrix(., ncol = ncol(mat1)) %>%
        apply(., 1, sum)
      
    } else{
      ### NO bootstrappping ###
      
      diff_post <- mat1 - mat2
      attr(diff_post, which = "class") <- "matrix"
      
      diff_post <- diff_post %>%
        abs() %>%
        apply(., 1, sum)
      
      # prior difference matrices
      diff_prior <- abs(rnorm(
        n = 1e4 * ncol(mat1),
        mean = 0,
        sd = H1_prior_sd
      ) -
        rnorm(
          n = 1e4 * ncol(mat1),
          mean = 0,
          sd = H1_prior_sd
        )) %>%
        matrix(., ncol = ncol(mat1)) %>%
        apply(., 1, sum)
    }
    
    # distribution for null rope range
    diff_null <- abs(rnorm(
      n = 1e4 * ncol(mat1),
      mean = 0,
      sd = null_prior_sd
    ) -
      rnorm(
        n = 1e4 * ncol(mat1),
        mean = 0,
        sd = 0.02
      )) %>%
      matrix(., ncol = ncol(mat1)) %>%
      apply(., 1, sum)
    # HDI for Null distribution, CI_high will be used as upper ROPE limit
    null_ci <- bayestestR::hdi(diff_null, ci = 1)
    
    overlap_null_post <-
      diff_post[diff_post < max(diff_null)] %>%
      length() / length(diff_post)
    cat(paste0("\n Overlap of Null and Posterior: ",
               round(as.double(overlap_null_post) * 100, 4), "%. \n"))
    
    overlap_null_prior <-
      diff_post[diff_prior < max(diff_null)] %>%
      length() / length(diff_prior)
    cat(paste0("\n Overlap of Null and Posterior: ",
               round(as.double(overlap_null_prior) * 100, 4), "%. \n"))
    
    # plot prior vs. posterior
    if (isTRUE(plot)) {
      # combine diff_post and diff_prior in a single column of a dataframe
      # with another column as an indicator if it is a posterior or prior
      # distribution
      x_UL <- median(diff_prior)
      df_samples <- data.frame(posterior = diff_post,
                               prior = diff_prior) %>%
        tidyr::pivot_longer(
          cols = c(posterior, prior),
          names_to = "distribution",
          values_to = "value"
        ) %>%
        rbind(data.frame(distribution = "null",
                         value = diff_null))
      
      plot <- df_samples %>%
        ggplot2::ggplot() +
        ggplot2::geom_density(aes(value, fill = distribution),
                              alpha = .5) +
        ggplot2::scale_x_continuous(limits = c(0, x_UL), expand = expansion()) +
        ggplot2::scale_y_continuous(limits = c(0, NA), expand = expansion()) +
        labs(x = "Difference", y = "Density") +
        theme_light() +
        theme(panel.grid = element_blank())
      
      print(plot)
    }
    # if there is no overlap of posterior and null ommit BF
    
      if (overlap_null_post == 0 ){
      cat(
        "\n There is no overlap of the posterior for H1 and and the ROPE range for H0. \n The bayesfactor for such a case would be highly unstable and is therefore not computed!"
      )
      return(Inf)
        } else if (overlap_null_post > 0 & overlap_null_prior == 0) {
      if (overlap_null_prior == 0)
       cat(
        "\n There is no overlap of the posterior for H1 and and the ROPE range for H0. \n The bayesfactor for such a case would be highly unstable and is therefore not computed!"
      )
      return(Inf)
          
    } else{
      # oherwise compute bayesfactor
      bf <-
        bayestestR::bf_parameters(
          posterior = diff_post,
          prior = diff_prior,
          null = c(null_ci$CI_low, null_ci$CI_high),
          direction = 0
        )
      print(bf)
      return(bf$log_BF)
    }
    # clean up
    rm(mat1, mat2, diff_post, diff_prior, diff_null)
  }
```

### Compare matrices
```{r}
compare_mat(
  mat1 = beta_post_1a,
  mat2 = beta_post_1b,
  bootstrap_samples = 0,
  plot = TRUE
)
compare_mat(
  mat1 = beta_post_1a,
  mat2 = beta_post_1b,
  bootstrap_samples = 500,
  plot = TRUE
)
compare_mat(
  mat1 = beta_post_1a,
  mat2 = beta_post_1b,
  bootstrap_samples = 1e4,
  plot = TRUE
)
compare_mat(
  mat1 = beta_post_1a,
  mat2 = beta_post_2,
  bootstrap_samples = 4e4,
  plot = TRUE
)
compare_mat(
  mat1 = beta_post_1a,
  mat2 = beta_post_3,
  bootstrap_samples = 4e4,
  plot = TRUE
) 
compare_mat(
  mat1 = beta_post_1a,
  mat2 = beta_post_4,
  bootstrap_samples = 4e4,
  plot = TRUE
) 
```

```{r}
n <- 30
log_BFs <- rep(NA, n)
for (i in 1:n) {
  log_BFs[i] <- compare_mat(
    mat1 = beta_post_1a,
    mat2 = beta_post_1b,
    bootstrap_samples = 5e4,
    plot = FALSE
  )
}
```

```{r}
hist((log_BFs))
sd(log_BFs)

data.frame(log_BFs = log_BFs, log_BFs_boot = log_BFs_boot) %>%
      ggplot2::ggplot() +
      ggplot2::geom_histogram(aes(log_BFs),
                            fill = "red",
                            alpha = .5,
                            binwidth = .1) +
      ggplot2::geom_histogram(aes(log_BFs_boot),
                            fill = "blue",
                            alpha = .5,
                            binwidth = .1) +
      ggplot2::xlim(-5, 0)

```






