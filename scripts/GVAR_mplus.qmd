---
title: "GVAR_mplus.qmd"
format: html
editor: source
author: Bj√∂rn S. Siepe
---

# Preparation
Load relevant packages
```{r}
library(graphicalVAR)
library(here)
library(tidyverse)
library(MplusAutomation)
set.seed(35037)
```

Create dataset to feed into MPlus:
```{r}
# Additionally, use data from our preprint
l_graphs <- readRDS(here("data", "l_graphs.rds"))

# Choose graph 6
gvar_mod <- l_graphs$graph6

# Add partial correlations
gvar_mod$PCC <- -cov2cor(gvar_mod$kappa)
diag(gvar_mod$PCC) <- 0

# Simulate data
gvar_dat <- as.data.frame(graphicalVAR::graphicalVARsim(nTime = 200, 
                                          beta = gvar_mod$beta[1:4, 1:4],
                                          kappa = gvar_mod$kappa[1:4, 1:4]))
gvar_mod$beta <- gvar_mod$beta[1:4, 1:4]
gvar_mod$kappa <- gvar_mod$kappa[1:4, 1:4]
gvar_mod$PCC <- gvar_mod$PCC[1:4, 1:4]

```


# Prepare MPlus
```{r}
# Prepare MPlus data via MPlusautomation
# keep all variables
prepareMplusData(
  gvar_dat,
  filename = here("scripts/mplus_gvar_example.dat")) # scripts folder for Mplus
```

Create MPlus input text file
```{r}
# Create MPlus input text file
mplus_model <- " 
DATA:	    FILE = mplus_gvar_example.dat;    ! data file (should be in same folder)

VARIABLE:	NAMES = V1 V2 V3 V4;          ! providing names to the variables 
            USEVARIABLES = V1 V2 V3 V4;   ! select variables for the analysis
	        LAGGED = V1(1) V2(1) V3(1) V4(1);  ! creating first-order
                                    ! lagged observed variables                                    
            MISSING = *;            ! missing value code

ANALYSIS:	ESTIMATOR = BAYES;      ! set estimator (must be Bayes for DSEM) 
	        PROCESSORS = 8;         ! using 2 processors
	        BITERATIONS = (4000);   ! choose number of iterations;
                                    ! minimum is now 2000; will be more if 
                                    ! the convergence criterion indicates
                                    ! convergence was not reached

MODEL:	    !VAR Parameters 
            V1 ON V1&1 (b1)    
            V2&1 (b2) 
            V3&1 (b3) 
            V4&1 (b4);        
            V2 ON V1&1 (b5)
            V2&1 (b6)  
            V3&1 (b7)
            V4&1 (b8);
            V3 ON V1&1 (b9) 
            V2&1 (b10)
            V3&1 (b11)
            V4&1 (b12);
            V4 ON V1&1 (b13) 
            V2&1 (b14)
            V3&1 (b15)
            V4&1 (b16);
            
            !Covariance Parameters
            V1 with V2 (s12) 
                    V3 (s13) 
                    V4 (s14);
            V2 with V3 (s23) 
                    V4 (s24);
            V3 with V4 (s34);
            
            !Variance Parameters
            V1 (s11)
            V2 (s22)
            V3 (s33)
            V4 (s44);

MODEL PRIORS: b1-b16 ~ N(0,1);
              s12 ~ IW(1,1);
OUTPUT:	    TECH1 TECH8;            ! asking additional output
SAVEDATA: BPARAMETERS IS additional_mplus.dat; ! saving posterior samples
PLOT:	    TYPE = PLOT3;           ! asking for plots
"
# Write MPlus input file
writeLines(mplus_model, here("scripts/mplus_gvar_example.inp"))

```

Do it automatically with own functions:
```{r}
library(MplusAutomation)
# Example usage of function:
data_example <- data.frame(V1 = rnorm(100), V2 = rnorm(100), V3 = rnorm(100), V4 = rnorm(100), V5 = rnorm(100))
result <- mplus_var_syntax(data_example)
cat(result$syntax)



```


Now execute the model
```{r}
# automatic model
runModels("mplus_model.inp", 
                       showOutput=TRUE)

test <- convert_mplus_samples("mplus_model.out")

```

```{r}
# manual model
runModels(here("scripts/mplus_gvar_example.inp"), 
                       showOutput=TRUE)
```


# Postprocessing

Try the function:
```{r}
test <- convert_mplus_samples(here("scripts/mplus_gvar_example.out"))
```

Evaluate the results:
```{r}
eval_mplus <- array_compare_dgp(test, dgp = gvar_mod, dgp_pcor_name = "PCC")
```






