---
title: "bf-simulation-study"
format: html
editor: visual
---

# Preparation

```{r}
library(BGGM)
library(SimDesign)
library(tidyverse)
library(ggh4x)
library(gt)
library(gtExtras)
library(here)


source(here::here("scripts","functions.R"))
SimClean()

```

# Writing Simulation Functions

## Creating Design

```{r}
## Variable Objects
# Number of timepoints
tp <- c(75, 200, 1e3)
# tp <- 75

# Amount of change between DGP
change <- c("truegraph", "change1.6", "const0.05", "const0.15")

# Which dgp
dgp_num <- c("graph3", "graph4", "graph5")

# Number of variables
# cannot change from 6 for the moment
nvar <- c(4, 6)

# scale for null range
null_scale <- c(.03, .04, .05)

df_design <- createDesign(
  tp = tp,
  change = change,
  null_scale = null_scale,
  nvar = nvar,
  dgp_num = dgp_num
  )

## Fixed Objects
# These are used in SimDesign to specify objects passed to later functions
# that do not vary across conditions

# DGPs
l_changed_graphs_0305 <- readRDS(here::here("data/l_changed_graphs_0305.rds"))


# gvar_mod_00 <- l_changed_graphs_0305[["graph5"]][["truegraph"]]
# gvar_mod_c16<- l_changed_graphs_0305[["graph5"]][["change1.6"]]
# gvar_mod_05 <- l_changed_graphs_0305[["graph5"]][["const0.1"]]
# gvar_mod_15 <- l_changed_graphs_0305[["graph5"]][["const0.15"]]
# dgp_list <- list("true" = gvar_mod_00,
#                  "change16" = gvar_mod_c16,
#                  "const05" = gvar_mod_05,
#                  "const15" = gvar_mod_15)

dgp_list <- l_changed_graphs_0305

# Further simulation parameters
sim_pars <- list(dgp_list = dgp_list,
                 means = 0,
                 rho_prior = 0.25,
                 beta_prior = 0.5,
                 bggm_iter = 1e4
                 )

```

## Data Generation Function

We always simulate from the "true" graph, and then simulate either from another "true" graph (i.e., same DGP), or from two alternative modificaitons.

```{r}
sim_generate <- function(condition, fixed_objects = NULL) {
  # obtain fixed parameters
  # this is NOT like the typical attach
  SimDesign::Attach(fixed_objects)
  
  # obtain condition parameters
  tp <- condition$tp
  change <- condition$change
  null_scale <- condition$null_scale
  dgp_list <- fixed_objects$dgp_list
  nvar <- condition$nvar
  dgp_num <- condition$dgp_num
  
  # Cut away variables depending on nvar
  # might ideally be better to create completely new network
  # because partial correlation dimension depend on number of variables
  # but we disregard that for now
  data_dgp_true <- dgp_list[[dgp_num]][["truegraph"]]
  data_dgp_change <- dgp_list[[dgp_num]][[change]]
  
  # TODO should add check that kappa leads to spd pcor
  
  
  # Simulate dataset under true
  data_true <-
    as.data.frame(
      graphicalVAR::graphicalVARsim(
        nTime = tp,
        beta = data_dgp_true$beta[1:nvar, 1:nvar],
        kappa = data_dgp_true$kappa[1:nvar, 1:nvar],
        mean = means
      )
    )
  
  # Standardize data
  data_true <- as.data.frame(scale(data_true))
  
  # Simulate dataset under change
  data_change <-
    as.data.frame(
      graphicalVAR::graphicalVARsim(
        nTime = tp,
        beta = data_dgp_change$beta[1:nvar, 1:nvar],
        kappa = data_dgp_change$kappa[1:nvar, 1:nvar],
        mean = means
      )
    )
  
  # Standardize data
  data_change <- as.data.frame(scale(data_change))
  
  l_data <- list(data_true = data_true,
                 data_change = data_change)
  
  return(l_data)
  
  
}

```

## Analysis Function

For now, only fit with BGGM, and then compute Bayes Factor.

```{r}
sim_analyse <- function(condition, dat, fixed_objects = NULL) {
  
  SimDesign::Attach(fixed_objects)    
  
  #--- Fit BGGM model
  # On true data
  fit_bggm_true <- BGGM::var_estimate(dat$data_true,
                                 rho_sd = rho_prior,
                                 beta_sd = beta_prior,
                                 iter = bggm_iter, 
                                 progress = FALSE)
  
  # On change data
  fit_bggm_change <- BGGM::var_estimate(dat$data_change,
                                 rho_sd = rho_prior,
                                 beta_sd = beta_prior,
                                 iter = bggm_iter, 
                                 progress = FALSE)
  
  #--- Obtain Bayes Factor
  source(here::here("scripts","functions.R"))

  # BFs for Beta
  mat_comp_beta <- compare_matrices(
    mat1 = draws_array2matrix(fit_bggm_true$fit$beta),
    mat2 = draws_array2matrix(fit_bggm_change$fit$beta),
    parameter_type = "Beta", 
    bootstrap_samples = 0,
    H1_prior_scale = .5,
    H0_distribution = "uniform",
    H0_prior_scale = condition$null_scale,
    plot = FALSE
)
    # BFs for Beta for Rho
  mat_comp_rho <- compare_matrices(
    mat1 = draws_array2matrix(fit_bggm_true$fit$pcors),
    mat2 = draws_array2matrix(fit_bggm_change$fit$pcors),
    parameter_type = "Rho", 
    bootstrap_samples = 0,
    H1_prior_scale = .5,
    H0_distribution = "uniform",
    H0_prior_scale = condition$null_scale,
    plot = FALSE
)
  #--- Return
  ret_analyse <- data.frame(
    # Beta
    bf_beta = (mat_comp_beta[[1]]),
    log_bf_beta = (mat_comp_beta[[2]]),
    post_in_null_beta = mat_comp_beta[[3]],
    # Rho
    bf_rho = (mat_comp_rho[[1]]),
    log_bf_rho = (mat_comp_rho[[2]]),
    post_in_null_rho = mat_comp_rho[[3]]
    )
  
  return(ret_analyse)
  
}
```

## Summarize Function

```{r}
sim_summarise <- function(condition, results, fixed_objects = NULL) {
  
  SimDesign::Attach(fixed_objects)  
  
  
  # Helper to compute mcse of generic summary statistics
  mcse_gen <- function(x){
    sqrt(var(x)/length(x))
  }
 
  # Compute mean of Bayes Factor
  bf_median_beta <- median(results$bf_beta, na.rm = TRUE)
  # bf_median.mcse_beta <- mcse_gen(results)
  bf_mad_beta <- mad(results$bf_beta, na.rm = TRUE)
  bf_median_rho <- median(results$bf_rho, na.rm = TRUE)
  bf_mad_rho <- mad(results$bf_rho, na.rm = TRUE)
  
  # Compute mean/median of ROPE
  rope_median_beta <- median(results$post_in_null_beta, na.rm = TRUE)
  rope_mad_beta <- mad(results$post_in_null_beta, na.rm = TRUE)
  rope_median_rho <- median(results$post_in_null_rho, na.rm = TRUE)
  rope_mad_rho <- mad(results$post_in_null_rho, na.rm = TRUE)
  
  # Get change condition
  true_dgp <- condition$change
  
  # Is there a difference?
  true_diff <- ifelse(true_dgp == "truegraph", 0, 1)
  true_null <- ifelse(true_dgp == "truegraph", 1, 0)
  
  # Dichotomize decisions for BF and ROPE
  bf_detect_diff_beta = sum(ifelse(results$log_bf_beta > 0 , 0, 1))/length(results$log_bf_beta)
  bf_detect_diff_rho = sum(ifelse(results$log_bf_rho > 0 , 0, 1))/length(results$log_bf_rho)
  
  rope_detect_diff_beta = sum(ifelse(results$post_in_null_beta < 50 , 1, 0))/length(results$post_in_null_beta)
  rope_detect_diff_rho = sum(ifelse(results$post_in_null_rho < 50 , 1, 0))/length(results$post_in_null_rho)
  
  # judge correctness based on true diff/null
  bf_detect_diff_beta_correct <- true_diff * bf_detect_diff_beta + true_null * (1 - bf_detect_diff_beta)
  bf_detect_diff_rho_correct <- true_diff * bf_detect_diff_rho + true_null * (1 - bf_detect_diff_rho)
  rope_detect_diff_beta_correct <- true_diff * rope_detect_diff_beta + true_null * (1 - rope_detect_diff_beta)
  rope_detect_diff_rho_correct <- true_diff * rope_detect_diff_rho + true_null * (1 - rope_detect_diff_rho)

  
  
  # Return all results
  ret_summarise <- data.frame(bf_median_beta = bf_median_beta,
                     bf_mad_beta = bf_mad_beta,
                     bf_median_rho = bf_median_rho,
                     bf_mad_rho = bf_mad_rho,
                     rope_median_beta = rope_median_beta,
                     rope_mad_beta = rope_mad_beta,
                     rope_median_rho = rope_median_rho,
                     rope_mad_rho = rope_mad_rho,
                     bf_detect_diff_beta = bf_detect_diff_beta,
                     bf_detect_diff_rho = bf_detect_diff_rho,
                     rope_detect_diff_beta = rope_detect_diff_beta,
                     rope_detect_diff_rho = rope_detect_diff_rho,
                     bf_detect_diff_beta_correct = bf_detect_diff_beta_correct,
                     bf_detect_diff_rho_correct = bf_detect_diff_rho_correct,
                     rope_detect_diff_beta_correct = rope_detect_diff_beta_correct,
                     rope_detect_diff_rho_correct = rope_detect_diff_rho_correct
                    )
  
  return(ret_summarise)
}
```

# Run Simulation

```{r eval=FALSE}
cores <- parallel::detectCores() - 20



res <- runSimulation(design = df_design, 
                     packages = c("tidyverse", "here", "Rmpfr"),
                     replications = 1000, 
                     ncores = cores,
                     generate = sim_generate, 
                     analyse = sim_analyse, 
                     summarise = sim_summarise, 
                     fixed_objects = sim_pars,
                     save_results = TRUE,
                     save_seeds = FALSE,
                     # debug = 'all',
                     parallel = TRUE)

SimClean()

# res <- SimExtract(res, what = 'results')
# save results
saveRDS(res, here::here("output", "bf_sim_res.rds"))
```

```{r}
res <- readRDS(here::here("output", "bf_sim_res.rds"))
```


<!-- Resummarize  -->
<!-- ```{r} -->
<!-- res <- SimDesign::reSummarise(sim_summarise, -->
<!--                               dir = here::here("output/bf_sim_results")) -->
<!-- saveRDS(res, here::here("output", "bf_sim_res.rds")) -->

<!-- ``` -->

# Analyze simulation

Prep
```{r}
dgp_levels <- c("Empirical\nSparse" = "graph3",
                "Sparse Chain" = "graph4", 
                "Nonsparse" = "graph5")

change_names <- c(
  # "change1.2" = paste("Largest", "\u00D7", "1.2"),
                  # "change1.4" = paste("Largest", "\u00D7", "1.4"),
                  "truegraph" = "Same DGP",
                  "change1.6" = paste("Largest", "\u00D7", "1.6"),
                  "const0.05" = paste("All", "\u00b1", "0.05"),
                  # "const0.1" = paste("All", "\u00b1", "0.10"),
                  "const0.15" = paste("All", "\u00b1", "0.15")
)
```





First focus on the implemented decisions thresholds and their correctness
```{r}
bf_res_plot_large <- res %>% 
  # mutate tp, null_scale, nvar to factors
  dplyr::mutate(tp = factor(tp),
                null_scale = factor(null_scale),
                nvar = factor(nvar)) %>%
  # select tp, change, null_scale, nvar, dgp_num, and everything that contains "correct"
  dplyr::select(tp, change, null_scale, nvar, dgp_num, contains("correct")) %>% 
  # pivot correctness to long, then separate columns that contain beta or rho
  tidyr::pivot_longer(-c(tp, change, null_scale, nvar, dgp_num), 
                      values_to = "correct_rate") %>% 
  # separate everything before first underscore in name column
  tidyr::separate(name, into = c("method", "detect", "diff", "matrix", "correct"), sep = "_") %>% 
  dplyr::select(!c(detect, diff, correct)) %>%
  ggplot(aes(x = tp, y = correct_rate, color = method))+
  geom_point()+
  ggh4x::facet_nested(dgp_num + change ~ nvar + matrix + null_scale, scales = "free")+
  theme_compare()+
  scale_fill_manual(values = okabe_fill_enh)


# save as svg in figures folder
ggsave(here::here("figures", "bf_res_plot_large.svg"), bf_res_plot_large, 
       width = 20, height = 10, device = "svg")
```


Build a large table with colors. Focus on 6 variables for now
```{r}
res %>% 
  filter(nvar == 6) %>% 
  dplyr::select(!nvar) %>% 
  dplyr::mutate(tp = factor(tp),
                null_scale = factor(null_scale)) %>%
  mutate(dgp_num = fct_recode(as_factor(as.character(dgp_num)), !!!dgp_levels)) %>% 
  mutate(change = case_when(
    change == "truegraph" ~ "Same DGP",
    change == "change1.6" ~ paste("Largest", "\u00D7", "1.6"),
    change == "const0.05" ~ paste("All", "\u00b1", "0.05"),
    change == "const0.15" ~ paste("All", "\u00b1", "0.15")
  )) %>%
  mutate(change = as.factor(change)) %>% 
  # select tp, change, null_scale, nvar, dgp_num, and everything that contains "correct"
  dplyr::select(tp, change, null_scale, dgp_num, contains("correct")) %>% 
  # pivot correctness to long, then separate columns that contain beta or rho
  tidyr::pivot_longer(-c(tp, change, null_scale, dgp_num), 
                      values_to = "correct_rate") %>% 
  # separate everything before first underscore in name column
  tidyr::separate(name, into = c("method", "detect", "diff", "matrix", "correct"), sep = "_") %>% 
  dplyr::select(!c(detect, diff, correct)) %>% 
  pivot_wider(names_from = method, values_from = correct_rate) %>%
  # reorder columns
  dplyr::select(change, everything()) %>% 
  gt(groupname_col = "dgp_num") %>% 
  gt_theme_538() %>%
  gt_color_rows(
    columns = c(bf, rope), 
    palette = c("#CC79A7", "#009E73"),
    domain = c(0, 1)
  ) %>% 
  # save as html in figures
  gtsave(here::here("figures", "bf_res_table_large.html"))
                                  
                                  
                                  
```

Summarize it a bit more: 
```{r}
res %>% 
  filter(nvar == 6) %>% 
  dplyr::select(!nvar) %>% 
  dplyr::mutate(tp = factor(tp),
                null_scale = factor(null_scale)) %>%
  mutate(dgp_num = fct_recode(as_factor(as.character(dgp_num)), !!!dgp_levels)) %>% 
  mutate(change = case_when(
    change == "truegraph" ~ "Same DGP",
    change == "change1.6" ~ paste("Largest", "\u00D7", "1.6"),
    change == "const0.05" ~ paste("All", "\u00b1", "0.05"),
    change == "const0.15" ~ paste("All", "\u00b1", "0.15")
  )) %>%
  mutate(change = as.factor(change)) %>% 
  # select tp, change, null_scale, nvar, dgp_num, and everything that contains "correct"
  dplyr::select(tp, change, null_scale, dgp_num, contains("correct")) %>% 
  # pivot correctness to long, then separate columns that contain beta or rho
  tidyr::pivot_longer(-c(tp, change, null_scale, dgp_num), 
                      values_to = "correct_rate") %>% 
  # separate everything before first underscore in name column
  tidyr::separate(name, into = c("method", "detect", "diff", "matrix", "correct"), sep = "_") %>% 
  dplyr::select(!c(detect, diff, correct)) %>% 
  pivot_wider(names_from = method, values_from = correct_rate) %>%
  # reorder columns
  dplyr::select(change, everything()) %>% 
  group_by(dgp_num, tp, null_scale) %>% 
  summarize(across(c(bf,rope), 
                    ~mean(.x, na.rm = TRUE))) %>% 
  gt(groupname_col = "dgp_num") %>% 
  gt_theme_538() %>%
  gt_color_rows(
    columns = c(bf, rope), 
    palette = c("#CC79A7", "#009E73"),
    domain = c(0, 1)
  ) %>% 
  # save as html in figures
  gtsave(here::here("figures", "bf_res_table_summary.html"))


```

## ROPE
Look into average ROPE inclusion. This is a bit unnecessarily complicated.
```{r}
res %>% 
  filter(nvar == 6) %>% 
  dplyr::select(!nvar) %>% 
  dplyr::mutate(tp = factor(tp),
                null_scale = factor(null_scale)) %>%
  mutate(dgp_num = fct_recode(as_factor(as.character(dgp_num)), !!!dgp_levels)) %>% 
  mutate(change = case_when(
    change == "truegraph" ~ "Same DGP",
    change == "change1.6" ~ paste("Largest", "\u00D7", "1.6"),
    change == "const0.05" ~ paste("All", "\u00b1", "0.05"),
    change == "const0.15" ~ paste("All", "\u00b1", "0.15")
  )) %>%
  mutate(change = as.factor(change)) %>% 
  # select tp, change, null_scale, nvar, dgp_num
  dplyr::select(tp, change, null_scale, dgp_num, contains("rope")) %>% 
  select(!contains("correct")) %>%
  tidyr::pivot_longer(-c(tp, change, null_scale, dgp_num), 
                      values_to = "value") %>% 
  # separate at last underscore
  tidyr::separate(name, into = c("method", "matrix"), sep = "_(?=[^_]+$)") %>% 
  tidyr::separate(method, into = c("rope", "stat"), sep = "_(?=[^_]+$)") %>% 
  select(!rope) %>%
  mutate(stat = ifelse(stat == "diff", "Detection", stat)) %>% 
  pivot_wider(names_from = stat, values_from = value) %>% 
  # recalculate detection correctness again
  mutate(change_bin = ifelse(change == "Same DGP", 0, 1),
         same_bin = ifelse(change == "Same DGP", 1, 0)) %>%
  mutate(decision_correct = change_bin * Detection + same_bin * (1 - Detection)) %>% 
  select(!c(same_bin, change_bin)) %>% 
  gt(groupname_col = "dgp_num") %>% 
  gt_theme_538() %>%
  gt_color_rows(
    columns = decision_correct, 
    palette = c("#CC79A7", "#009E73"),
    domain = c(0, 1)
  )

```


## Bayes Factor

```{r}
res %>% 
  filter(nvar == 6) %>% 
  dplyr::select(!nvar) %>% 
  dplyr::mutate(tp = factor(tp),
                null_scale = factor(null_scale)) %>%
  mutate(dgp_num = fct_recode(as_factor(as.character(dgp_num)), !!!dgp_levels)) %>% 
  mutate(change = case_when(
    change == "truegraph" ~ "Same DGP",
    change == "change1.6" ~ paste("Largest", "\u00D7", "1.6"),
    change == "const0.05" ~ paste("All", "\u00b1", "0.05"),
    change == "const0.15" ~ paste("All", "\u00b1", "0.15")
  )) %>%
  mutate(change = as.factor(change)) %>% 
  # select tp, change, null_scale, nvar, dgp_num
  dplyr::select(tp, change, null_scale, dgp_num, contains("bf")) %>% 
  select(!contains("correct")) %>%
  tidyr::pivot_longer(-c(tp, change, null_scale, dgp_num), 
                      values_to = "value") %>% 
  # separate at last underscore
  tidyr::separate(name, into = c("method", "matrix"), sep = "_(?=[^_]+$)") %>% 
  tidyr::separate(method, into = c("bf", "stat"), sep = "_(?=[^_]+$)") %>% 
  select(!bf) %>%
  mutate(stat = ifelse(stat == "diff", "Detection", stat)) %>% 
  pivot_wider(names_from = stat, values_from = value) %>% 
  # recalculate detection correctness again
  mutate(change_bin = ifelse(change == "Same DGP", 0, 1),
         same_bin = ifelse(change == "Same DGP", 1, 0)) %>%
  mutate(decision_correct = change_bin * Detection + same_bin * (1 - Detection)) %>% 
  select(!c(same_bin, change_bin, mad)) %>% 
  # compute log BF
  mutate("Median Log BF" = round(log10(median),2)) %>%
  select(dgp_num, tp, change, null_scale, matrix, "Median Log BF", Detection, decision_correct) %>% 
  gt(groupname_col = "dgp_num") %>% 
  gt_theme_538() %>%
  gt_color_rows(
    columns = decision_correct, 
    palette = c("#CC79A7", "#009E73"),
    domain = c(0, 1)
  ) %>% 
  gtsave(here::here("figures", "log_bf_sim_table.html"))
```





#--- OLD CODE

# Analyze Simulation

```{r}
res <- res %>% mutate(
  is_null = ifelse(change == "true", 1, 0),
  true_diff_beta = ifelse(change == "true", 0, 1),
  detect_diff_beta = ifelse(log_bf_beta > 0 , 0, 1),
  correct_beta = ifelse(true_diff_beta == detect_diff_beta, 1, 0),
  abs_error_beta = abs(is_null - post_in_null_beta / 100),
  true_diff_rho = ifelse(change == "true", 0, 1),
  detect_diff_rho = ifelse(log_bf_rho > 0 , 0, 1),
  correct_rho = ifelse(true_diff_rho == detect_diff_rho, 1, 0),
  abs_error_rho = abs(is_null - post_in_null_rho / 100)
) %>%
  # per null_scale
  group_by(null_scale, tp) %>%
  mutate(
    sens_beta = mean(sum(true_diff_beta * detect_diff_beta) /
                       sum(true_diff_beta)),
    spec_beta = mean(sum(is_null * (
      detect_diff_beta * -1 + 1
    )) /
      sum(is_null)),
    sens_rho = mean(sum(true_diff_rho * detect_diff_rho) /
                      sum(true_diff_rho)),
    spec_rho = mean(sum(is_null * (
      detect_diff_rho * -1 + 1
    )) /
      sum(is_null))
  ) %>%
  ungroup()
  
sens_spec <- 
res %>% 
  distinct(tp,null_scale, sens_beta, spec_beta, sens_rho, spec_rho) %>% 
  arrange(tp) %>% 
  round(2)
sens_spec
```

```{r}
library(ggdist)
res %>%
  ggplot2::ggplot(aes(x = factor(tp), 
                      y = abs_error_beta,
                      fill = factor(tp), 
                      col = factor(tp))) +
  geom_boxplot(
    width = 0.3,
    alpha = 0.3
  ) +
  labs(title = "Beta",
       x = "timepoints",
       y = "absolute error") +
  scale_y_continuous(limits = c(0,1)) +
  facet_grid(change ~ null_scale)

```

```{r}
res %>%
  ggplot2::ggplot(aes(
    x = factor(tp),
    y = abs_error_rho,
    fill = factor(tp),
    col = factor(tp)
  )) +
  geom_boxplot(width = 0.3,
               alpha = 0.3) +
  labs(title = "Rho",
       x = "timepoints",
       y = "absolute error") +
  scale_y_continuous(limits = c(0,1)) +
  facet_grid(change ~ null_scale)
```

```{r}
res %>%
  ggplot2::ggplot(aes(x = factor(tp), 
                      y = log_bf_beta,
                      fill = factor(tp), 
                      col = factor(tp))) +
  geom_hline(yintercept = log(.01)) + 
  geom_hline(yintercept = log(100)) + 
  geom_boxplot(
    width = 0.3,
    alpha = 0.3
  ) +
  labs(title = "Beta",
       x = "timepoints",
       y = "bayes factor") +
  scale_y_continuous() +
  facet_grid(change ~ null_scale, scales = "free_y")
```

```{r}
res %>%
  ggplot2::ggplot(aes(x = factor(tp), 
                      y = log_bf_rho,
                      fill = factor(tp), 
                      col = factor(tp))) +
  geom_hline(yintercept = log(.01)) + 
  geom_hline(yintercept = log(100)) + 
  geom_boxplot(
    width = 0.3,
    alpha = 0.3
  ) +
  labs(title = "Rho",
       x = "timepoints",
       y = "bayes factor") +
  scale_y_continuous() +
  facet_grid(change ~ null_scale, scales = "free_y")
```
